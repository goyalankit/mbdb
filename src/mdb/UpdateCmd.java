// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mdb;

import com.bdb.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UpdateCmd extends Update {

    final public static int ARG_LENGTH = 3 ;
    final public static int TOK_LENGTH = 4 ;

    public void execute () {
        
        super.execute();
        parseUpdateQuery();
    }

    public void parseUpdateQuery() {
        AstCursor c = new AstCursor();
        List<Relation> relations = new ArrayList<Relation>(); //just to be able to use the same predicate
        List<Predicate> predicates = new ArrayList<Predicate>();

        Map<String, DbValue> updates = new HashMap<String, DbValue>();

        Relation relation = Relation.getRelation(getRel_name().toString().trim());

        if(relation == null || getWHERE() == null){
            System.err.println("Relation doesn't exist or malformed request");
            return;
        }

        relations.add(relation);

        try {

            //local predicates for update operation
            Predicate p = null;
            for (c.FirstElement(getOne_rel_pred()); c.MoreElement(); c.NextElement() )
            {
                p = getSimplePredicate(c, relations);
                if(null != p) predicates.add(p);
            }

            //create a map of values to be updated.
            for (c.FirstElement(getAssign_list()); c.MoreElement(); c.NextElement() )
            {
                Asgn asgn = ((Asgn) c.node);
                String fieldName = asgn.getField_name().toString().trim();

                if(asgn.getLiteral() instanceof IntLit)
                    updates.put(fieldName, (new DbInt(Integer.parseInt(asgn.getLiteral().toString().trim()), fieldName)));
                else if(asgn.getLiteral() instanceof StrLit)
                    updates.put(fieldName, (new DbString(asgn.getLiteral().toString().trim(), fieldName)));
                else
                    throw new MyDatabaseException("Invalid data type");
            }

            UpdateQueryProcessor uqp = new UpdateQueryProcessor(relations.get(0), predicates, updates);
            uqp.build();
            uqp.process();

        }

        catch (MyDatabaseException e)
        {
            e.printStackTrace();
            return;
        }
    }


    private Predicate getSimplePredicate(AstCursor c, List<Relation> relations) throws MyDatabaseException {
        Predicate p;
        OneRelClause simpleClause = (OneRelClause)c.node;

        String lhs = simpleClause.getField_name().toString().trim();
        String []s;
        String lhs_relation = null;
        String lhs_column = null;

        if(lhs.contains(".")){
            s = lhs.split("\\.");
            lhs_relation = s[0].trim();
            lhs_column = s[1].trim();
        }else{
            lhs_relation = null;
            lhs_column = lhs.trim();
        }

        p = new Predicate(PredType.SIMPLE, relations, lhs_relation, lhs_column,
                simpleClause.getLiteral().toString().trim(),
                OpType.getOp(simpleClause.getRel().toString().trim()));
        return p;
    }



    public Assign_list getAssign_list () {
        
        return (Assign_list) arg [1] ;
    }

    public One_rel_pred getOne_rel_pred () {
        
        return (One_rel_pred) arg [2] ;
    }

    public Rel_name getRel_name () {
        
        return (Rel_name) arg [0] ;
    }

    public AstToken getSEMI () {
        
        return (AstToken) tok [3] ;
    }

    public AstToken getSET () {
        
        return (AstToken) tok [1] ;
    }

    public AstToken getUPDATE () {
        
        return (AstToken) tok [0] ;
    }

    public AstToken getWHERE () {
        
        return (AstToken) tok [2] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, false, true, false, true, false, true} ;
    }

    public UpdateCmd setParms
    (AstToken tok0, Rel_name arg0, AstToken tok1, Assign_list arg1, AstToken tok2, One_rel_pred arg2, AstToken tok3)
    {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* UPDATE */
        arg [0] = arg0 ;            /* Rel_name */
        tok [1] = tok1 ;            /* SET */
        arg [1] = arg1 ;            /* Assign_list */
        tok [2] = tok2 ;            /* WHERE */
        arg [2] = arg2 ;            /* One_rel_pred */
        tok [3] = tok3 ;            /* SEMI */
        
        InitChildren () ;
        return (UpdateCmd) this ;
    }

}
