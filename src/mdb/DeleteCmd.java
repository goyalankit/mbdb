// Automatically generated code.  Edit at your own risk!
// Generated by bali2jak v2002.09.03.

package mdb;

import com.bdb.*;

import java.util.ArrayList;
import java.util.List;

public class DeleteCmd extends Delete {

    final public static int ARG_LENGTH = 2 ;
    final public static int TOK_LENGTH = 3 ;

    public void execute () {
        
        super.execute();
        parseDeleteQuery();
    }

    private void parseDeleteQuery() {

        AstCursor c = new AstCursor();
        List<Relation> relations = new ArrayList<Relation>(); //just to be able to use the same predicate
        List<Predicate> predicates = new ArrayList<Predicate>();

        Relation relation = Relation.getRelation(getRel_name().toString().trim());

        if(relation == null || getWHERE() == null){
            System.err.println("Relation doesn't exist or malformed request");
            return;
        }

        relations.add(relation);

        try {
            //local predicates for update operation
            Predicate p = null;
            for (c.FirstElement(getOne_rel_pred()); c.MoreElement(); c.NextElement() )
            {
                p = getSimplePredicate(c, relations);
                if(null != p) predicates.add(p);
            }

            DeleteQueryProcessor dqp = new DeleteQueryProcessor(relations.get(0), predicates);
            dqp.build();
            dqp.process();

        }

        catch (MyDatabaseException e)
        {
            e.printStackTrace();
            return;
        }

    }

    //TODO: this method is redundant. can be moved to a common class.
    private Predicate getSimplePredicate(AstCursor c, List<Relation> relations) throws MyDatabaseException {
        Predicate p;

        OneRelClause simpleClause = (OneRelClause)c.node;

        String lhs = simpleClause.getField_name().toString().trim();
        String []s;
        String lhs_relation = null;
        String lhs_column = null;

        if(lhs.contains(".")){
            s = lhs.split("\\.");
            lhs_relation = s[0].trim();
            lhs_column = s[1].trim();
        }else{
            lhs_relation = null;
            lhs_column = lhs.trim();
        }

        p = new Predicate(PredType.SIMPLE, relations, lhs_relation, lhs_column,
                simpleClause.getLiteral().toString().trim(),
                OpType.getOp(simpleClause.getRel().toString().trim()));
        return p;
    }


    public AstToken getDELETE () {
        
        return (AstToken) tok [0] ;
    }

    public One_rel_pred getOne_rel_pred () {
        
        return (One_rel_pred) arg [1] ;
    }

    public Rel_name getRel_name () {
        
        return (Rel_name) arg [0] ;
    }

    public AstToken getSEMI () {
        
        return (AstToken) tok [2] ;
    }

    public AstToken getWHERE () {
        
        return (AstToken) tok [1] ;
    }

    public boolean[] printorder () {
        
        return new boolean[] {true, false, true, false, true} ;
    }

    public DeleteCmd setParms
    (AstToken tok0, Rel_name arg0, AstToken tok1, One_rel_pred arg1, AstToken tok2)
    {
        
        arg = new AstNode [ARG_LENGTH] ;
        tok = new AstTokenInterface [TOK_LENGTH] ;
        
        tok [0] = tok0 ;            /* DELETE */
        arg [0] = arg0 ;            /* Rel_name */
        tok [1] = tok1 ;            /* WHERE */
        arg [1] = arg1 ;            /* One_rel_pred */
        tok [2] = tok2 ;            /* SEMI */
        
        InitChildren () ;
        return (DeleteCmd) this ;
    }

}
